name: plr_meson Windows experiments
run-name: Testing Creating PL/R using meson
on: [push]
jobs:
  build_test_install:
    name: ${{ matrix.compiler }} ${{ matrix.os }} ${{ matrix.FAKE }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:

          - compiler: UCRT64
            os: windows-latest

#         - compiler: cygwin
#           os: windows-latest
# 
#         - compiler: msvc
#           os: windows-latest
    steps:
      - name: Matrix Verification
        if: matrix.os == 'windows-latest'
        run: |
          # systeminfo
          echo "${{ matrix.compiler }} on ${{ matrix.os }}"
          if( Test-Path "C:\Program Files\PostgreSQL\14" ) { "pg x64-14 exists."  } else {  "pg x64-14 not exists." } # ONLY THIS EXISTS
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          #
          ${env:compiler} = "${{ matrix.compiler }}"
          Set-EnvVar "compiler=${env:compiler}"
          ${env:os} = "${{ matrix.os }}"
          Set-EnvVar "os=${env:os}"
          #
          # echo "PATH: ${env:PATH}"
          # DOES set env.PATH but pollutes the output
          # Set-EnvVar "PATH=C:\ANYWHERE;${env:PATH}"
          echo "MATRIX.FAKE ${{ matrix.FAKE }}"

      - name: matrix FAKE death
        if: matrix.FAKE == ''
        run: |
          echo "DID NOT DIE"

      - name: Matrix Verification Result
        if: matrix.os == 'windows-latest'
        run: |
          echo "compiler: ${{ env.compiler }}"
          echo "PATH: ${env:PATH}"

#       # running Meson on GitHub Actions will end up using GCC rather than MSVC
#       #
#       # His fix . 
#       # https://dvdhrm.github.io/2021/04/21/meson-msvc-github-actions/
#       #
#       # `x64` for 64-bit x86 machines, `x86` for 32-bit x86 machines.
#       # https://github.com/bus1/cabuild/blob/8c91ebf06b7a5f8405cf93c89a6928e4c76967e0/action/msdevshell/action.yml
#       - name: Prepare Github Actions, MSVC, and Meson
#         if: ${{ env.os == 'windows-latest' && env.compiler == 'msvc' }}
#         uses: bus1/cabuild/action/msdevshell@v1
#         with:
#           architecture: ${{ env.msvc_architecture }}

      # 34 seconds with zero packages
      # 2 minutes and seven(7) seconds with everything
      - name: Install Windows mingw Software - 
        if: ${{ env.os == 'windows-latest' && env.compiler == 'UCRT64' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-curl
            git
            mingw-w64-ucrt-x86_64-meson
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-gcc
            tar
            gzip 
            mingw-w64-ucrt-x86_64-readline
            mingw-w64-ucrt-x86_64-zlib
            mingw-w64-ucrt-x86_64-icu
            icu-devel  
            git
            flex       
            bison      
            mingw-w64-ucrt-x86_64-perl
            mingw-w64-ucrt-x86_64-winpty
            p7zip   
            tar       
            zstd
            mingw-w64-ucrt-x86_64-tools-git
            mingw-w64-ucrt-x86_64-binutils
            mingw-w64-ucrt-x86_64-diffutils

      - name: mingw Who and What Place
        if: ${{ env.os == 'windows-latest' && env.compiler == 'UCRT64' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
      - shell: msys2 {0}
        run: |
          echo "mingw Who and What Place"
          echo "uname: $(uname -a)"
          echo "whoami: $(whoami)"
          echo "id: $(id)"
          echo "pwd: $(pwd)"

      - name: Install Windows mingw Software - PostgreSQL
        if: ${{ env.os == 'windows-latest' && env.compiler == 'UCRT64' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          install: mingw-w64-ucrt-x86_64-postgresql

      # NOTE: ONLY RUN IF I KNOW THAT postgres IS IN THE PATH
      - name: What Place Is "postgres"
        if: ${{ env.os == 'windows-latest' && env.compiler == 'UCRT64' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
      - shell: msys2 {0}
        run: |
          echo "What Place Is postgres"
          echo "which postgres: $(which postgres)"

      - name: Cache R-x.y.z Windows Installer Exe
        if: ${{ env.os == 'windows-latest' && env.compiler == 'UCRT64' }}
        uses: actions/cache@v3.3.1
        id: cacheRWindowsInstallerExe
        with:
          path: R-4.2.3-win.exe
          key:  R-4.2.3-win.exe
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      # five seconds
      - name: Download R for Windows R-x.y.z R-rmajor.rminor.rpatch
        if: ${{ env.os == 'windows-latest' && env.compiler == 'UCRT64' && steps.cacheRWindowsInstallerExe.outputs.cache-hit != 'true' }}
        uses: suisei-cn/actions-download-file@v1.3.0
        id: downloadfileRforWindows 
        with:
          url: https://cran.r-project.org/bin/windows/base/old/4.2.3/R-4.2.3-win.exe

      - name: Install R for Windows R-x.y.z R-rmajor.rminor.rpatch
        if: ${{ env.os == 'windows-latest' && env.compiler == 'UCRT64' }}
        run: |
          function Start-App  {param($X,$Y) Start-Process -NoNewWindow -FilePath "$X" -ArgumentList $Y }
          Start-App "R-4.2.3-win.exe" "/VERYSILENT", "/DIR=C:\RINSTALL",  "/NOICONS", "/TASKS="

