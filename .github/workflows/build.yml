name: plr_meson Windows experiments
run-name: Testing Creating PL/R using meson
on: [push]
jobs:
  build_test_install:
    name: ${{ matrix.compiler }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:

          - compiler: UCRT64
            os: windows-latest

#         - compiler: cygwin
#           os: windows-latest
# 
#         - compiler: msvc
#           os: windows-latest
    steps:
      - name: Matrix Verification
        if: matrix.os == 'windows-latest'
        run: |
          # systeminfo
          echo "${{ matrix.compiler }} on ${{ matrix.os }}"
          if( Test-Path "C:\Program Files\PostgreSQL\14" ) { "pg x64-14 exists."  } else {  "pg x64-14 not exists." } # ONLY THIS EXISTS
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          #
          ${env:compiler} = "${{ matrix.compiler }}"
          Set-EnvVar "compiler=${env:compiler}"
          ${env:os} = "${{ matrix.os }}"
          Set-EnvVar "os=${env:os}"
          #
          echo "PATH: ${env:PATH}"
          Set-EnvVar "PATH=C:\ANYWHERE;${env:PATH}"
          echo "MATRIX.FAKE ${{ matrix.FAKE }}"

      - name: Matrix Verification Result
        if: matrix.os == 'windows-latest'
        run: |
          echo "compiler: ${{ env.compiler }}"
          echo "PATH: ${env:PATH}"

      # running Meson on GitHub Actions will end up using GCC rather than MSVC
      #
      # His fix . 
      # https://dvdhrm.github.io/2021/04/21/meson-msvc-github-actions/
      #
      # `x64` for 64-bit x86 machines, `x86` for 32-bit x86 machines.
      # https://github.com/bus1/cabuild/blob/8c91ebf06b7a5f8405cf93c89a6928e4c76967e0/action/msdevshell/action.yml
      - name: Prepare Github Actions, MSVC, and Meson
        if: ${{ env.os == 'windows-latest' && env.compiler == 'msvc' }}
        uses: bus1/cabuild/action/msdevshell@v1
        with:
          architecture: ${{ env.msvc_architecture }}


      # Allowed values: MSYS | MINGW64 | MINGW32 | UCRT64 | CLANG32 | CLANG64 | CLANGARM64
      # https://github.com/msys2/setup-msys2
      # EXCEPT NOT SUPPORTING "MSYS" because of inconsistent (non-standard "old" bare) package naming
      #
      # - name: Install Windows mingw Software - 34 seconds with zero packages
      #   if: ${{ env.os == 'windows-latest' && env.compiler == 'UCRT64' }}
      #   uses: msys2/setup-msys2@v2
      #   with:
      #     msystem: ${{ matrix.compiler }}
      #     update: true






