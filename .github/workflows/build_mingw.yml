name: Meson Builds PL/R
run-name: Testing Creating PL/R using meson
on: [push]
jobs:
  build_test_install:
    name: ${{ matrix.compiler }} R ${{ matrix.rversion }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:

          # R-devel build for Windows ("bleeding edge")
          # https://cran.r-project.org/bin/windows/base/R-devel-win.exe
          #
          # Patched build for Windows
          # https://cran.r-project.org/bin/windows/base/R-x.y.zpatched-win.exe
          #
          # for Windows
          # https://cran.r-project.org/bin/windows/base/R-x.y.z-win.exe

          # (bleeding edge R) PL/R can not be compiled using Microsoft Visual Studio
          - os: windows-latest
            compiler: UCRT64
            Platform: x64
            rversion: devel
            R_HOME: 'D:\RINSTALL'
            R_ARCH: /x64
            testOnpgwin: true
            pgwinversion: 15.3-3

          # (Current R) PL/R can not be compiled using Microsoft Visual Studio
          - os: windows-latest
            compiler: UCRT64
            Platform: x64
            rversion: 4.3.1patched
            R_HOME: 'D:\RINSTALL'
            R_ARCH: /x64
            testOnpgwin: true
            pgwinversion: 15.3-3

          # Last PL/R that can be compiled using Microsoft Visual Studio
          - os: windows-latest
            compiler: UCRT64
            Platform: x64
            rversion: 4.2.3
            R_HOME: 'D:\RINSTALL'
            R_ARCH: /x64
            testOnpgwin: true
            pgwinversion: 15.3-3

          # Last "R for Windows" supports x86 and sub-architecture
          - os: windows-latest
            compiler: MINGW32
            Platform: x86
            rversion: 4.1.3
            R_HOME: 'D:\RINSTALL'
            R_ARCH: /i386
            testOnpgwin: true
            pgwinversion: 10.23-1

          # Last "R for Windows" supports x86 and single architecure
          - os: windows-latest
            compiler: MINGW32
            Platform: x86
            rversion: 2.11.1
            R_HOME: 'D:\RINSTALL'
            testOnpgwin: true
            pgwinversion: 10.23-1

    steps:

      - name: Prepare to Download Files from Github
        run: |
          git config --global core.autocrlf input
          git config --global advice.detachedHead false

      - name: Checkout Code of This Repository
        uses: actions/checkout@v3

      - name: Matrix Variables
        if: matrix.os == 'windows-latest'
        run: |
          # systeminfo
          echo "${{ matrix.compiler }} on ${{ matrix.os }}"
          # JUL 2023 - only THIS exists in Github Actions
          if( Test-Path "C:\Program Files\PostgreSQL\14" ) { "pg x64-14 exists."  } else {  "pg x64-14 not exists." }
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          #
          ${env:HEAD8_GITHUB_SHA} = "${env:GITHUB_SHA}".SubString(0,8)
          Set-EnvVar "HEAD8_GITHUB_SHA=${env:HEAD8_GITHUB_SHA}"

          echo "HEAD8_GITHUB_SHA: ${env:HEAD8_GITHUB_SHA}"

          ${env:compiler} = "${{ matrix.compiler }}"
          if("${env:compiler}" -eq ""){${env:compiler} = "notset"}
          Set-EnvVar "compiler=${env:compiler}"

          echo "compiler: ${env:compiler}"

          ${env:os} = "${{ matrix.os }}"
          if("${env:os}" -eq ""){${env:os} = "notset"}
          Set-EnvVar "os=${env:os}"

          echo "os: ${env:os}"

          ${env:Platform} = "${{ matrix.Platform }}"
          if("${env:Platform}" -eq ""){${env:Platform} = "notset"}
          Set-EnvVar "Platform=${env:Platform}"

          echo "Platform: ${env:Platform}"

          ${env:rversion} = "${{ matrix.rversion }}"
          if("${env:rversion}" -eq ""){${env:rversion} = "notset"}
          Set-EnvVar "rversion=${env:rversion}"

          echo "rversion: ${env:rversion}"

          ${env:rmajor} = "notset"
          ${env:rminor} = "notset"
          ${env:rpatch} = "notset"
          ${env:rversionnumeric} = "notset"

          if("${env:rversion}" -ne "notset") {
            # R-major.minor.patch
            # R-major.minor.patchpatched
            if(${env:rversion} -match '(\d+)')             { ${env:rmajor} = $matches[1] }
            if(${env:rversion} -match '\d+[.](\d+)')       { ${env:rminor} = $matches[1] }
            if(${env:rversion} -match '\d+[.]\d+[.](\d+)') { ${env:rpatch} = $matches[1] }
            if(${env:rversion} -match '\d+[.]\d+[.](\d+)') {
              ${env:rversionnumeric} = ([int]"${env:rmajor}" * 10000) + ([int]"${env:rminor}" * 100) + ([int]"${env:rpatch}")
            }
          }
          if("${env:rversion}" -match 'devel') {
            ${env:rmajor} = "devel"
            ${env:rminor} = "devel"
            ${env:rpatch} = "devel"
            ${env:rversionnumeric} = "999999"
          }

          Set-EnvVar "rmajor=${env:rmajor}"
          Set-EnvVar "rminor=${env:rminor}"
          Set-EnvVar "rpatch=${env:rpatch}"
          Set-EnvVar "rversionnumeric=${env:rversionnumeric}"

          echo "         rmajor: ${env:rmajor}"
          echo "         rminor: ${env:rminor}"
          echo "         rpatch: ${env:rpatch}"
          echo "rversionnumeric: ${env:rversionnumeric}"

          ${env:rversionlong} = "notset"
          # derived (this will be changed FAR FAR below)
          ${env:rversionlong} = ${env:rversion}
          Set-EnvVar "rversionlong=${env:rversionlong}"

          ${env:bit} = "notset"
                                           # derived
          if("${env:Platform}" -eq "x64")  { ${env:bit} = "64" }
          if("${env:Platform}" -eq "x86")  { ${env:bit} = "32" }
          if("${env:Platform}" -eq "notset") { ${env:bit} = "notset" }
          Set-EnvVar "bit=${env:bit}"

          echo "bit: ${env:bit}"

          ${env:R_HOME} = "${{ matrix.R_HOME }}"
          if("${env:R_HOME}" -eq ""){${env:R_HOME} = "notset"}
          Set-EnvVar "R_HOME=${env:R_HOME}"

          echo "R_HOME: ${env:R_HOME}"

          ${env:R_ARCH} = "${{ matrix.R_ARCH }}"
          if("${env:R_ARCH}" -eq ""){${env:R_ARCH} = "notset"}
          Set-EnvVar "R_ARCH=${env:R_ARCH}"

          echo "R_ARCH: ${env:R_ARCH}"

          ${env:PG_HOME} = "${{ matrix.PG_HOME }}"
          if("${env:PG_HOME}" -eq ""){${env:PG_HOME} = "notset"}
          Set-EnvVar "PG_HOME=${env:PG_HOME}"

          echo "PG_HOME: ${env:PG_HOME}"

          ${env:mingw_env} = "notset"
          if (  "${{ matrix.compiler }}" -eq "UCRT64"     ) { ${env:mingw_env} = "ucrt-x86_64" }
          if (  "${{ matrix.compiler }}" -eq "MINGW32"    ) { ${env:mingw_env} = "i686" }
          if (  "${{ matrix.compiler }}" -eq "notset"     ) { ${env:mingw_env} = "notset" }
          Set-EnvVar "mingw_env=${env:mingw_env}"

          echo "mingw_env: ${env:mingw_env}"

          ${env:MINGW_PACKAGE_PREFIX} = "notset"
          if ("${{ env.mingw_env }}" -ne "notset") { ${env:MINGW_PACKAGE_PREFIX} = "mingw-w64-${env:mingw_env}" }
          if ("${{ env.mingw_env }}" -eq "notset") { ${env:MINGW_PACKAGE_PREFIX} = "notset" }
          Set-EnvVar "MINGW_PACKAGE_PREFIX=${env:MINGW_PACKAGE_PREFIX}"

          echo "MINGW_PACKAGE_PREFIX: ${env:MINGW_PACKAGE_PREFIX}"

          ${env:compiler_exe} = "notset"
          if (  "${{ matrix.compiler }}" -eq "UCRT64"     ) { ${env:compiler_exe} = "gcc" }
          if (  "${{ matrix.compiler }}" -eq "MINGW32"    ) { ${env:compiler_exe} = "gcc" }
          if (  "${{ matrix.compiler }}" -eq "notset"     )   { ${env:compiler_exe} = "notset" }
          Set-EnvVar "compiler_exe=${env:compiler_exe}"

          echo "compiler_exe: ${env:compiler_exe}"

          ${env:R_ARCHplat} = "notset"
          if("${env:R_ARCH}" -eq "/x64")    { ${env:R_ARCHplat} =    "x64" }
          if("${env:R_ARCH}" -eq "/i386")   { ${env:R_ARCHplat} =   "i386" }
          if("${env:R_ARCH}" -eq "notset")  { ${env:R_ARCHplat} = "notset" }
          Set-EnvVar "R_ARCHplat=${env:R_ARCHplat}"

          echo "R_ARCHplat: ${env:R_ARCHplat}"

          ${env:testOnpgwin} = "${{ matrix.testOnpgwin }}"
          if("${env:testOnpgwin}" -eq ""){${env:testOnpgwin} = "notset"}
          Set-EnvVar "testOnpgwin=${env:testOnpgwin}"

          echo "testOnpgwin: ${env:testOnpgwin}"

          ${env:pgwinversion} = "${{ matrix.pgwinversion }}"
          if("${env:pgwinversion}" -eq ""){${env:pgwinversion} = "notset"}
          Set-EnvVar "pgwinversion=${env:pgwinversion}"

          echo "pgwinversion: ${env:pgwinversion}"

          ${env:pgwinmajor} = "notset"
          # if any, strip off the: right-most part dot, then numbers, then one hyphen, then numbers.
          if("${env:pgwinversion}" -ne "notset") { ${env:pgwinmajor} = ${env:pgwinversion} -replace "[.]\d+-\d+$" }
          if("${env:pgwinversion}" -eq "notset") { ${env:pgwinmajor} = "notset" }
          Set-EnvVar "pgwinmajor=${env:pgwinmajor}"

          echo "pgwinmajor: ${env:pgwinmajor}"

          ${env:pgwinversionlong} = "notset"
          if("${env:Platform}" -eq "x86"  -and "${env:pgwinversion}" -ne "notset") {
            ${env:pgwinversionlong} = "postgresql-${env:pgwinversion}-windows"
          }
          if("${env:Platform}" -eq "x64" -and "${env:pgwinversion}" -ne "notset") {
            ${env:pgwinversionlong} = "postgresql-${env:pgwinversion}-windows-x64"
          }
          if("${env:Platform}" -eq "notset" -or "${env:pgwinversion}" -eq "notset") {
            ${env:pgwinversionlong} = "notset"
          }
          Set-EnvVar "pgwinversionlong=${env:pgwinversionlong}"

          echo "pgwinversionlong: ${env:pgwinversionlong}"

          if("${env:pgwinversionlong}" -ne "notset") {
            ${env:ENTDB_PG_DOWNLOAD_URL} = "http://get.enterprisedb.com/postgresql/${env:pgwinversionlong}.exe"
          }
          if("${env:pgwinversionlong}" -eq "notset") {
            ${env:ENTDB_PG_DOWNLOAD_URL} = "notset"
          }
          Set-EnvVar "ENTDB_PG_DOWNLOAD_URL=${env:ENTDB_PG_DOWNLOAD_URL}"

          echo "ENTDB_PG_DOWNLOAD_URL: ${env:ENTDB_PG_DOWNLOAD_URL}"

          ${env:PGVER2} = "notset"
          # Prep for Install PostgreSQL for Windows (if applicable)
          ${env:PGVER2} = ${env:pgwinmajor}
          Set-EnvVar "PGVER2=${env:PGVER2}"

          echo "PGVER2: ${env:PGVER2}"

          ${env:PGBIN2}  = "notset"
          ${env:PGDATA2} = "notset"
          ${env:PGROOT2} = "notset"
          if("${env:Platform}" -eq "x64") {
            ${env:PGBIN2}  = "C:\Program Files\PostgreSQL\${env:pgwinmajor}\bin"
            ${env:PGDATA2} = "C:\Program Files\PostgreSQL\${env:pgwinmajor}\data"
            ${env:PGROOT2} = "C:\Program Files\PostgreSQL\${env:pgwinmajor}"
          }
          if("${env:Platform}" -eq "x86") {
            ${env:PGBIN2}  = "C:\Program Files (x86)\PostgreSQL\${env:pgwinmajor}\bin"
            ${env:PGDATA2} = "C:\Program Files (x86)\PostgreSQL\${env:pgwinmajor}\data"
            ${env:PGROOT2} = "C:\Program Files (x86)\PostgreSQL\${env:pgwinmajor}"
          }
          if("${env:Platform}" -eq "notset") {
            ${env:PGBIN2}  = "notset"
            ${env:PGDATA2} = "notset"
            ${env:PGROOT2} = "notset"
          }
          Set-EnvVar "PGBIN2=${env:PGBIN2}"
          Set-EnvVar "PGDATA2=${env:PGDATA2}"
          Set-EnvVar "PGROOT2=${env:PGROOT2}"

          echo " PGBIN2: ${env:PGBIN2}"
          echo "PGDATA2: ${env:PGDATA2}"
          echo "PGROOT2: ${env:PGROOT2}"


      - name: Matrix Windows Platform Specific Variables
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}

          # enhances and overrides #
          ${env:rversionlong} = "${{ env.rversionlong }}-win"
          if( "${{ env.rversion }}" -match "2.11.0|2.11.1") {
            ${env:rversionlong} = "${{ env.rversion }}-win${{ env.bit }}"
          }
          ${env:rversionlong} = "R-${env:rversionlong}"

          Set-EnvVar "rversionlong=${env:rversionlong}"

          echo "rversionlong: ${env:rversionlong}"

          # CRAN download URL
          ${env:CRAN_R_DOWNLOAD_URL} ="notset"

          if(-not ("${env:rversionlong}" -match 'patched|devel')) {
            if([int]"${{ env.rversionnumeric }}" -ge 30600 ) {
              ${env:CRAN_R_DOWNLOAD_URL} = "https://cran.r-project.org/bin/windows/base/old/${{ env.rversion }}/${env:rversionlong}.exe"
            }

            if([int]"${{ env.rversionnumeric }}" -lt 30600 ) {
              ${env:CRAN_R_DOWNLOAD_URL} = "https://cran-archive.r-project.org/bin/windows/base/old/${{ env.rversion }}/${env:rversionlong}.exe"
            }
          }
          if("${env:rversionlong}" -match 'patched|devel') {
            ${env:CRAN_R_DOWNLOAD_URL} = "https://cran.r-project.org/bin/windows/base/${env:rversionlong}.exe"
          }
          Set-EnvVar "CRAN_R_DOWNLOAD_URL=${env:CRAN_R_DOWNLOAD_URL}"

          echo "CRAN_R_DOWNLOAD_URL: ${env:CRAN_R_DOWNLOAD_URL}"

#       # running Meson on GitHub Actions will end up using GCC rather than MSVC
#       #
#       # His fix .
#       # https://dvdhrm.github.io/2021/04/21/meson-msvc-github-actions/
#       #
#       # `x64` for 64-bit x86 machines, `x86` for 32-bit x86 machines.
#       # https://github.com/bus1/cabuild/blob/8c91ebf06b7a5f8405cf93c89a6928e4c76967e0/action/msdevshell/action.yml
#       - name: Prepare Github Actions, MSVC, and Meson
#         if: ${{ env.os == 'windows-latest' && env.compiler == 'msvc' }}
#         uses: bus1/cabuild/action/msdevshell@v1
#         with:
#           architecture: ${{ env.msvc_architecture }}

      - name: Cache R-x.y.z Windows Installer Exe
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) }}
        uses: actions/cache@v3.3.1
        id: cacheRWindowsInstallerExe
        with:
          path: ${{ env.rversionlong }}.exe
          key:  ${{ env.rversionlong }}.exe
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Cache PostgreSQL for Windows
        if: ${{ env.os == 'windows-latest' &&  ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' }}
        uses: actions/cache@v3.3.1
        id: cachePGWindowsInstallerExe
        with:
          path: ${{ env.pgwinversionlong }}.exe
          key:  ${{ env.pgwinversionlong }}.exe
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 10

      - name: Cache GNU diffutils for Test on PostgreSQL for Windows
        if: ${{ env.os == 'windows-latest' &&  ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' }}
        uses: actions/cache@v3.3.1
        id: cacheDiffutilsZip
        with:
          path: diffutils-2.8.7-1-bin.zip
          key:  diffutils-2.8.7-1-bin.zip
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      # Notice
      # Path R-2.11.1-x64
      # Download Name -R-2.11.1-win64.exe
      # https://cran-archive.r-project.org/bin/windows/base/old/2.11.1/R-2.11.1-win64.exe
      # Path R-2.11.1
      # Download Name - R-2.11.1-win32.exe
      # https://cran-archive.r-project.org/bin/windows/base/old/2.11.1/R-2.11.1-win32.exe
      #
      # five seconds
      - name: Download R for Windows R-x.y.z R-rmajor.rminor.rpatch
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && steps.cacheRWindowsInstallerExe.outputs.cache-hit != 'true' }}
        uses: suisei-cn/actions-download-file@v1.3.0
        id: downloadfileRforWindows
        with:
          url: ${{ env.CRAN_R_DOWNLOAD_URL }}

      - name: Download PostgreSQL for Windows
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' && steps.cachePGWindowsInstallerExe.outputs.cache-hit != 'true' }}
        uses: suisei-cn/actions-download-file@v1.3.0
        id: downloadfilePGforWindows
        with:
          url: ${{ env.ENTDB_PG_DOWNLOAD_URL }}

      - name: Download GNU diffutils for Test on PostgreSQL for Windows
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' && steps.cacheDiffutilsZip.outputs.cache-hit != 'true' }}
        uses: suisei-cn/actions-download-file@v1.3.0
        id: downloadDiffutilsZip
        with:
          url: https://github.com/AndreMikulec/plr_meson/releases/download/0.0.0.0.0.GITHUBCACHE/diffutils-2.8.7-1-bin.zip

      - name: Install R for Windows R-x.y.z R-rmajor.rminor.rpatch
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) }}
        env:
          R_HOME: ${{ env.R_HOME }}
          R_ARCHplat: ${{ env.R_ARCHplat }}
        shell: cmd
        run: |
          echo on
          echo R_HOME: %R_HOME%
          echo R_ARCHplat: %R_ARCHplat%
          rem need "main" for the GUIs and command line utilites to work
          rem A comma at the end is O.K
          rem Component "notset" is ignored
          "${{ env.rversionlong }}.exe" /VERYSILENT /COMPONENTS=main,%R_ARCHplat% /DIR=%R_HOME% /NOICONS /TASKS=
          dir "%R_HOME%"

      # Github Actions provided PostgreSQL x64-14 (as of AUGUST 2023)
      #
      # # AUGUST 2023
      # # The PL/R extension was built using PostreSQL 15
      # ServiceName postgresql-x64-14
      # Version 14.8
      # ServiceStatus Stopped
      # ServiceStartType Disabled
      # EnvironmentVariables PGBIN=C:\Program Files\PostgreSQL\14\bin
      # PGDATA=C:\Program Files\PostgreSQL\14\data
      # PGROOT=C:\Program Files\PostgreSQL\14
      # Path C:\Program Files\PostgreSQL\14
      # UserName postgres
      # Password root
      # #
      # https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md
      # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-software
      #
      - name: Enable PostgreSQL x64-14 for Windows and Start and Stop
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' && env.VER2 == '14' && env.Platform == 'x64' }}
        shell: cmd
        run: |
          echo on
          sc config "postgresql-x64-14" start= auto
          net start  postgresql-x64-14
          net stop   postgresql-x64-14

      - name: Install PostgreSQL for Windows and Stop PostgreSQL
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' &&  (( env.VER2 == '14' && env.Platform == 'x86' ) || ( env.VER2 != '14' )) }}
        env:
          PGVER2: ${{ env.PGVER2 }}
          PGROOT2: ${{ env.PGROOT2 }}
          Platform: ${{ env.Platform }}
        shell: cmd
        run: |
          echo on
          "${{ env.pgwinversionlong }}.exe" --unattendedmodeui none --mode unattended --enable-components server,commandlinetools --disable-components pgAdmin,stackbuilder --superpassword "root" > nul
          rem postgresql-15.3-4-windows-x64.exe
          rem "C:\Program Files\PostgreSQL\15"
          rem "C:\Program Files\PostgreSQL\15\data"
          rem root
          rem 5432
          rem "Installation Directory: C:\Program Files\PostgreSQL\15"
          rem "Server Installation Directory: C:\Program Files\PostgreSQL\15"
          rem "Data Directory: C:\Program Files\PostgreSQL\15\data"
          rem "Database Port: 5432"
          rem "Database Superuser: postgres"
          rem "Operating System Account: NT AUTHORITY\NetworkService"
          rem "Database Service: postgresql-x64-15"
          rem "Command Line Tools Installation Directory: C:\Program Files\PostgreSQL\15"
          rem "Installation Log: C:\Users\AnonymousUser\AppData\Local\Temp\install-postgresql.log"
          rem
          rem "Starting the database server"
          rem
          rem Installation will also start PostgreSQL
          if "%Platform%"=="x64" (net stop postgresql-x64-%PGVER2%)
          if "%Platform%"=="x86" (net stop postgresql-%PGVER2%)
          if "%Platform%"=="notset" (echo Platform is not set, therefore no net stop happens.)
          dir "%PGROOT2%"

      # Choco Install GNU diffutils
      # BUT the "crazy-max/ghaction-chocolatey@v2" "install diffutils" file download often times-out
      - name: Extract Diffuntils and add Diffuntils bin directory to the PATH for Test on PostgreSQL for Windows
        if: ${{ env.os == 'windows-latest' &&  ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' }}
        shell: cmd
        run: |
          mkdir                                "C:\OTHERBIN"
          mkdir                                "C:\OTHERBIN\diffutils"
          rem 7z is provided by Github Actions
          7z x  diffutils-2.8.7-1-bin.zip    -o"C:\OTHERBIN\diffutils"
          move  diffutils-2.8.7-1-bin.zip      "C:\OTHERBIN\diffutils"
          dir                                  "C:\OTHERBIN\diffutils"
          rem - man7.org/linux/man-pages/man1/printf.1.html
          printf                               "C:\\OTHERBIN\\diffutils\\bin" >> %GITHUB_PATH%

      # 34 seconds with zero packages
      # 2 minutes and seven(7) seconds with everything
      - name: Install Windows mingw Software
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.compiler }}
          # By default, the installation is not updated; hence package versions are those of the installation tarball.
          # Faster without the "update"
          # update: true
          #
          # if a 2nd run (not the proper way to install "postgres" separately)
          # if a 2nd run DO NOT DO "update: true"
          # if a 2nd run May not be able to find "postgres"
          # 100% sure THIS IS broken
          # location: D:\
          #
          # DO NOT KEEP "TRUE" - if using  multiple" MSYS2 environments" in this workflow
          # By default (true), caches various things between runs to make repeated runs faster.
          cache: false
          #
          install: >-
            ${{ env.MINGW_PACKAGE_PREFIX }}-pkg-config
            ${{ env.MINGW_PACKAGE_PREFIX }}-curl
            git
            ${{ env.MINGW_PACKAGE_PREFIX }}-meson
            ${{ env.MINGW_PACKAGE_PREFIX }}-make
            ${{ env.MINGW_PACKAGE_PREFIX }}-${{ env.compiler_exe }}
            tar
            gzip
            ${{ env.MINGW_PACKAGE_PREFIX }}-readline
            ${{ env.MINGW_PACKAGE_PREFIX }}-zlib
            ${{ env.MINGW_PACKAGE_PREFIX }}-icu
            icu-devel
            git
            flex
            bison
            ${{ env.MINGW_PACKAGE_PREFIX }}-perl
            ${{ env.MINGW_PACKAGE_PREFIX }}-winpty
            p7zip
            tar
            zstd
            ${{ env.MINGW_PACKAGE_PREFIX }}-tools-git
            ${{ env.MINGW_PACKAGE_PREFIX }}-binutils
            ${{ env.MINGW_PACKAGE_PREFIX }}-diffutils
            ${{ env.MINGW_PACKAGE_PREFIX }}-libxml2
            ${{ env.MINGW_PACKAGE_PREFIX }}-libxslt
            ${{ env.MINGW_PACKAGE_PREFIX }}-lz4
            ${{ env.MINGW_PACKAGE_PREFIX }}-postgresql

      - name: Meson Setup Compile and Non-Meson Manual Test
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.compiler }}
      - shell: msys2 {0}
        env:
          R_HOME: ${{ env.R_HOME }}
          R_ARCH: ${{ env.R_ARCH }}
          rversion: ${{ env.rversion }}
          PG_HOME: ${{ env.PG_HOME }}
        run: |
          echo "Meson Setup Compile and Non-Meson Manual Test"
          set -x -v -e

          # Msys
          # export OperatingSystem=$(uname -o)
          echo "compiler: ${{ env.compiler }}"
          export | grep MINGW
          export | grep MSYSTEM

          echo "R_ARCH: ${R_ARCH}"
          echo "R_HOME: ${R_HOME}"
          echo "rversion: ${rversion}"
          echo "PG_HOME: ${PG_HOME}"

          if [ "${R_ARCH}" == "notset" ]; then export R_ARCH=""; fi
          if [ "${R_HOME}" == "notset" ] || [ "${R_HOME}" == "" ]
          then
            echo "One must set R_HOME=value"
            exit 1
          fi
          export  R_HOME=$(cygpath "${R_HOME}")

          # user supplied variable
          echo "cygpath R_HOME: ${R_HOME}"

          if [ "${rversion}" == "notset" ] || [ "${rversion}" == "" ]
          then
            echo "One must set rversion=value"
            exit 1
          fi

          echo "rversion: ${rversion}"

          if [ "${PG_HOME}" == "notset" ]; then export PG_HOME=""; fi
          if [ ! "${PG_HOME}" == "" ]; then export PG_HOME=$(cygpath "${PG_HOME}"); fi

          # user supplied variable
          echo "cygpath PG_HOME: ${PG_HOME}"

          export BINDIR=$(pg_config | grep "^BINDIR" | sed "s/ = /=/" | sed "s/^.*=//")
          export BINDIR=$(cygpath $(cygpath -wl "${BINDIR}"))

          echo "pg_config BINDIR: ${BINDIR}"

          if [   "${PG_HOME}" == "" ]; then export PG_HOME=$(dirname "${BINDIR}"); fi

          echo "pg_config PG_HOME: ${PG_HOME}"

          export PKGLIBDIR=$(pg_config | grep "^PKGLIBDIR" | sed "s/ = /=/" | sed "s/^.*=//")
          export PKGLIBDIR=$(cygpath $(cygpath -wl "${PKGLIBDIR}"))

          echo "pg_config PKGLIBDIR: ${PKGLIBDIR}"

          export SHAREDIR=$(pg_config | grep "^SHAREDIR" | sed "s/ = /=/" | sed "s/^.*=//")
          export SHAREDIR=$(cygpath $(cygpath -wl "${SHAREDIR}"))

          echo "pg_config SHAREDIR: ${SHAREDIR}"

          # PATHs are needed for the proper compile and runtime
          # find "libraries"
          # R Non-Sub-Architectures
          export PATH="${R_HOME}/bin:${PATH}"
          # R    Sub-Architectures
          export PATH="${R_HOME}/bin${R_ARCH}:${PATH}"

          # can find PG "libraries"
          export PATH="${PG_HOME}/lib:${PATH}"
          #
          # can find PG "libraries"
          export PATH="${PG_HOME}/bin:${PATH}"

          echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH}"
          echo "PKG_CONFIG_SYSTEM_INCLUDE_PATH: ${PKG_CONFIG_SYSTEM_INCLUDE_PATH}"
          echo "PKG_CONFIG_SYSTEM_LIBRARY_PATH: ${PKG_CONFIG_SYSTEM_LIBRARY_PATH}"

          # note "Cygwin" has "no defaults"
          #
          # note MSYS(mingw) UCRT uses MSYSTEM_PREFIX="/ucrt64" in place of "/usr"
          # note MSYS(mingw) UCRT variable PKG_CONFIG_PATH at the tail also has "/ucrt64/share/pkgconfig"
          #
          # This case handles Cygwin.
          if [ "${PKG_CONFIG_PATH}" == "" ];                then export PKG_CONFIG_PATH="/usr/lib/pkgconfig"; fi
          if [ "${PKG_CONFIG_SYSTEM_INCLUDE_PATH}" == "" ]; then export PKG_CONFIG_SYSTEM_INCLUDE_PATH="/usr/include"; fi
          if [ "${PKG_CONFIG_SYSTEM_LIBRARY_PATH}" == "" ]; then export PKG_CONFIG_SYSTEM_LIBRARY_PATH="/usr/lib"; fi

          # For MSYS(mingw) and R environment variable R_ARCH and Rlib.dll.a.
          # Need ONE single leftmost headish important library path.
          export PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG=$(echo "${PKG_CONFIG_SYSTEM_LIBRARY_PATH}" |  grep -o '^[^:]*')
          # MSYS2(mingw) environments
          # e.g. UCRT
          # export PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG="/ucrt64/lib"
          echo "PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG: ${PKG_CONFIG_SYSTEM_LIBRARY_PATH}"

          echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH}"
          echo "PKG_CONFIG_SYSTEM_INCLUDE_PATH: ${PKG_CONFIG_SYSTEM_INCLUDE_PATH}"
          echo "PKG_CONFIG_SYSTEM_LIBRARY_PATH: ${PKG_CONFIG_SYSTEM_LIBRARY_PATH}"

          # Garantee to find the PostgreSQL libraries.
          # Some packages may also install an old "libpq" that is located in the default install location.
          # We do not want to use that old "libpg" when compiling PL/R.
          # Therefore, the PostgreSQL pkgconfig goes in front at the head.
          #
          export PKG_CONFIG_PATH="${PG_HOME}/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export PKG_CONFIG_SYSTEM_INCLUDE_PATH="${PG_HOME}/include:${PKG_CONFIG_SYSTEM_INCLUDE_PATH}"
          export PKG_CONFIG_SYSTEM_LIBRARY_PATH="${PG_HOME}/bin:${PG_HOME}/lib:${PKG_CONFIG_SYSTEM_LIBRARY_PATH}"

          echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH}"
          echo "PKG_CONFIG_SYSTEM_INCLUDE_PATH: ${PKG_CONFIG_SYSTEM_INCLUDE_PATH}"
          echo "PKG_CONFIG_SYSTEM_LIBRARY_PATH: ${PKG_CONFIG_SYSTEM_LIBRARY_PATH}"

          # This is Part 1 of 2 of a hack to make "meson" think that "libpostgres" is a library.
          # From the libpq.pc file, create a libpostgres.pc file.
          if [ ! -f "${PG_HOME}/lib/pkgconfig/libpostgres.pc" ]
          then
            cat "${PG_HOME}/lib/pkgconfig/libpq.pc" | sed "s/libpq/libpostgres/g" | sed "s/-lpq/-lpostgres/" > "${PG_HOME}/lib/pkgconfig/libpostgres.pc"
          fi

          # This is Part 2 of 2 of a hack to make "meson" think that "libpostgres" is a library
          # libpostgres.exe.a is not recognized as a static library
          # libpostgres.a     is     recognized as a static library
          #                         # typical software repository default install
          if [ ! -f "${PG_HOME}/lib/libpostgres.a" ] && [ ! -f "${PG_HOME}/lib/libpostgres.dll.a" ] && [ -f "${PG_HOME}/lib/libpostgres.exe.a" ]
          then
            # Note, a "meson built PostgreSQL install" will produce a file called "libpostgres.exe.a".
            cp -f   "${PG_HOME}/lib/libpostgres.exe.a" "${PG_HOME}/lib/libpostgres.a"
          fi

          ls -alrt "${PG_HOME}"/lib/libpostgres*

          # Make R into a library
          if [ ! -d "${PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG}/pkgconfig" ]
          then
            mkdir "${PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG}/pkgconfig"
          fi
          if [ ! -f "${PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG}/pkgconfig/libR.pc" ]
          then
            # Uses the provided template file "libR.pc"
            # This template file is "based" off of the "R for Cygwin" file /lib/pkgconfig/libR.pc.
            cat "libR.pc" | sed "s|R_HOME|${R_HOME}|" | sed "s|R_ARCH|${R_ARCH}|" | sed "s/rversion/${rversion}/" > "${PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG}/pkgconfig/libR.pc"
          fi
          #
          # Cygwin already has the file /usr/lib/R/lib/libR.dll.a
          # MSYS2 (mingw) compilers require libR.dll.a.  
          # That file is created by ddltool program parameter "--output-lib".
          #
          # Note, Windows compilers (e.g. msvc) require R.lib.  
          # To create this file, instead of using the "dlltool" program, instead use the msvc "lib" program.
          # Alternately, in the Windows compilers case, just rename an archive dll.a to be a .lib, 
          # and that also works.
          #
          if [ ! -d "${PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG}${R_ARCH}" ]
          then
            mkdir   "${PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG}${R_ARCH}"
          fi
          if [ ! -f "${PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG}${R_ARCH}/libR.dll.a" ]
          then
            pushd "${R_HOME}/bin${R_ARCH}"
            gendef  -         R.dll >     R.def
            dlltool --dllname R.dll --def R.def --output-lib libR.dll.a
            #
            # Put libR.dll.a into the general library location {...ORIG}${R_ARCH}/libR.dll.a
            mv libR.dll.a "${PKG_CONFIG_SYSTEM_LIBRARY_PATH_ORIG}${R_ARCH}/libR.dll.a"
            popd # from "${R_HOME}/bin${R_ARCH}"
          fi
          #

          #
          # Create and start the cluster before
          # the non-setup regression test (see FAR below).
          #
          mkdir     PGDATA
          initdb -D PGDATA
          pg_ctl -D PGDATA -l logfile start
          # Some environments require it
          export PGUSER=$(whoami)


          mkdir     "${PG_HOME}/contrib"
          #
          mkdir     "${PG_HOME}/contribplr"
          cp -R   * "${PG_HOME}/contribplr"
          #
          pushd     "${PG_HOME}/contribplr"
          #
          rm -Rf ../contrib/plr; rm -f "${PKGLIBDIR}/plr.dll.a" ;rm -f "${PKGLIBDIR}/plr.dll"
          #
          rm  -f "${SHAREDIR}/extension/plr.control"
          rm  -f  ${SHAREDIR}/extension/plr--*.sql

          #
          # build(create) artifacts (A "started" database is not required.)
          #
          # Note, from my "bad" memory, 
          # a non-script interactive MSYS2 session, may require either or both 
          # PG_HOME and/or R_HOME in the form producted by $(cygpath -w "${X_HOME}")
          # TODO - Re-verify this. 
          #
          meson setup --prefix="${PG_HOME}/contrib/plr" -DR_HOME="${R_HOME}" -DPG_HOME="${PG_HOME}" -Db_pie=true ../contrib/plr
          meson compile -C ../contrib/plr  -v
          #
          # [6/6] "cc" -o plr.dll
          # plr.dll.p/plr.c.obj
          # plr.dll.p/pg_conversion.c.obj
          # plr.dll.p/pg_backend_support.c.obj
          # plr.dll.p/pg_userfuncs.c.obj
          # plr.dll.p/pg_rsupport.c.obj
          # "-Wl,--allow-shlib-undefined" "-shared" "-Wl,--start-group"
          # "-Wl,--out-implib=plr.dll.a" "-fopenmp"
          # "D:/a/_temp/msys64/ucrt64/lib/x64/libR.dll.a"
          # "D:/a/_temp/msys64/ucrt64/lib/libpq.dll.a"
          # "D:/a/_temp/msys64/ucrt64/lib/libpostgres.dll.a"
          # "-lkernel32" "-luser32" "-lgdi32" "-lwinspool" "-lshell32"
          # "-lole32" "-loleaut32" "-luuid" "-lcomdlg32" "-ladvapi32"
          # "-Wl,--end-group"
          #

          #
          # install artifacts
          #
          if [ -f "../contrib/plr/plr.dll" ]
          then
            echo "plr.dll is found"
            cp ../contrib/plr/plr.dll   "${PKGLIBDIR}"
            ls -alrt                    "${PKGLIBDIR}/plr.dll"
          fi
          #
          if [ -f "../contrib/plr/plr.dll.a" ]
            echo "plr.dll.a is found"
            then cp ../contrib/plr/plr.dll.a "${PKGLIBDIR}/plr.dll.a"
            ls -alrt                         "${PKGLIBDIR}/plr.dll.a"
          fi
          #
          # install artifacts support file - plr.control
          #
          cp plr.control "${SHAREDIR}/extension"
          ls -alrt       "${SHAREDIR}/extension/plr.control"

          #
          # install artifacts support files - versioning "sql"
          #
          cp plr--*.sql  "${SHAREDIR}/extension"
          ls -alrt        ${SHAREDIR}/extension/plr--*.sql

          #
          # non-setup regression test
          # Directories of testing "sql" and testing "expected" results exist here 
          #
          "${PKGLIBDIR}/pgxs/src/test/regress/pg_regress" --bindir="${PG_HOME}/bin" --dbname=pl_regression plr bad_fun opt_window do out_args plr_transaction opt_window_frame || (cat regression.diffs && false)

          popd # from "${PG_HOME}/contribplr"

          #
          # save artifacts
          #
          if [ -f "${PG_HOME}/contrib/plr/plr.dll" ]
          then
            echo "Save plr.dll to be an artifact."
            cp    "${PG_HOME}/contrib/plr/plr.dll" .
            ls -alrt                      plr.dll
          fi
          if [ -f "${PG_HOME}/contrib/plr/plr.dll" ]
          then
            echo "Save plr.dll.a to be an artifact."
            cp    "${PG_HOME}/contrib/plr/plr.dll.a" .
            ls -alrt                      plr.dll.a
          fi

          #
          # for artifact naming, determine the Vendor Supplied pgversion
          #
          export pgversion=$(pg_config | grep "^VERSION" | sed "s/ = /=/" | sed "s/^.*=//" | grep -oP '[ ].*$' | grep -oP '\d.*$')
          # potential override
          echo "pgversion=${pgversion}" >> ${GITHUB_ENV}
          echo "pg_config VERSION pgversion: ${pgversion}"

          #
          # for artifact naming, determine the Vendor Supplied rversion
          #
          export rversion=$(R --version | head --lines=1 | sed "s/R version //" | sed "s/ (.*$//")
          # potential override
          echo "rversion=${rversion}" >> ${GITHUB_ENV}
          echo "R --version rversion: ${rversion}"

          #
          # Stop the cluster after
          # the non-setup regression test (see FAR above).
          #
          pg_ctl -D PGDATA -l logfile stop

      - name: Upload artifacts plr.dll and plr.dll.a for export for LOCAL testing
        if: ${{ env.os == 'windows-latest' &&  ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: plr-${{ env.HEAD8_GITHUB_SHA }}-${{ env.os }}-${{ env.compiler }}-${{ env.Platform }}-R${{ env.rversion }}-PG${{ env.pgversion }}
          path: |
            plr.dll
            plr.dll.a
            plr.control
            LICENSE

      - name: Setup for Test on PostgreSQL for Windows
        if: ${{ env.os == 'windows-latest' &&  ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.compiler }}
        env:
          PG_HOME: ${{ env.PG_HOME }}
          # PostgreSQL for Windows
          PGROOT2: ${{ env.PGROOT2 }}
      - shell: msys2 {0}
        run: |
          echo "Setup for Test on PostgreSQL for Windows"
          set -x -v -e
          #
          # Begin adding of files to Windows install directory (see below)
          #
          echo "compiler: ${{ env.compiler }}"
          export | grep MINGW
          export | grep MSYSTEM

          echo  "PG_HOME: ${PG_HOME}"
          echo  "PGROOT2: ${PGROOT2}"

          if [ "${PG_HOME}" == "notset" ]; then export PG_HOME=""; fi
          if [ ! "${PG_HOME}" == "" ]; then export PG_HOME=$(cygpath "${PG_HOME}"); fi

          export BINDIR=$(pg_config | grep "^BINDIR" | sed "s/ = /=/" | sed "s/^.*=//")
          export BINDIR=$(cygpath $(cygpath -wl "${BINDIR}"))

          echo "BINDIR: ${BINDIR}"

          if [   "${PG_HOME}" == "" ]; then export PG_HOME=$(dirname "${BINDIR}"); fi

          echo "PG_HOME: ${PG_HOME}"

          pushd     "${PG_HOME}/contribplr"
          #
          export PGROOT2=$(cygpath "${PGROOT2}")

          echo  "cygpath PGROOT2: ${PGROOT2}"

          cp ../contrib/plr/plr.dll   "${PGROOT2}/lib"
          ls -alrt                    "${PGROOT2}/lib/plr.dll"
          cp plr.control "${PGROOT2}/share/extension"
          ls -alrt       "${PGROOT2}/share/extension/plr.control"
          cp plr--*.sql  "${PGROOT2}/share/extension"
          ls -alrt       "${PGROOT2}"/share/extension/plr--*.sql

          popd # from "${PG_HOME}/contribplr"
          #
          # End adding of files to Windows (see below)
          #

#     # BUT the "crazy-max/ghaction-chocolatey@v2" "install diffutils" file download often times-out
#     - name: Choco Install GNU diffutils for Test on PostgreSQL for Windows
#       if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' }}
#       # Keep v2.  v2.2.0 may have connection to Sourceforge problems
#       uses: crazy-max/ghaction-chocolatey@v2
#       with:
#         args: install diffutils

      - name: Start PostgreSQL for Windows
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' }}
        env:
          PGVER2: ${{ env.PGVER2 }}
          Platform: ${{ env.Platform }}
        shell: cmd
        run: |
          echo on
          echo PGVER2   - %PGVER2%
          echo Platform - %Platform%
          rem Need to manually start PostgreSQL
          if "%Platform%"=="x64" (net start postgresql-x64-%PGVER2%)
          if "%Platform%"=="x86" (net start postgresql-%PGVER2%)
          if "%Platform%"=="notset" (echo Platform is not set, therefore no net start happens.)

      - name: Test on PostgreSQL for Windows
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' }}
        env:
          R_HOME: ${{ env.R_HOME }}
          R_ARCH: ${{ env.R_ARCH }}
          #
          PG_HOME: ${{ env.PGROOT2 }} # different
          PGBIN2: ${{ env.PGBIN2 }}
        shell: cmd
        run: |
          echo on
          echo R_HOME   - %R_HOME%
          echo R_ARCH   - %R_ARCH%
          echo PG_HOME  - %PG_HOME%
          echo PGVER2   - %PGVER2%
          echo PGBIN2   - %PGBIN2%
          echo Platform - %Platform%

          echo off
          rem R     Sub-Architectures
          if "%R_ARCH%"=="/x64"   set PATH=%R_HOME%\bin\x64;%PATH%
          if "%R_ARCH%"=="/i386"  set PATH=%R_HOME%\bin\i386;%PATH%
          rem not R Sub-Architectures
          if "%R_ARCH%"=="notset" set PATH=%R_HOME%\bin;%PATH%

          rem can find PG "libraries"
          set PATH=%PG_HOME%\lib;%PATH%

          rem can find PG "libraries"
          set PATH=%PG_HOME%\bin;%PATH%

          rem if I use chocolatey (most chocolatey programs location, but not all)
          rem set PATH="C:\ProgramData\chocolatey\bin";%PATH%

          echo PATH - %PATH%

          echo on
          set PGUSER=postgres
          set PGPASSWORD=root
          "%PGBIN2%\pg_regress" --bindir="%PGBIN2%" --dbname=pl_regression plr bad_fun opt_window do out_args plr_transaction opt_window_frame || (type regression.diffs && call)
          if "%ERRORLEVEL%"=="1" exit 1

      - name: Stop PostgreSQL for Windows
        if: ${{ env.os == 'windows-latest' && ( env.compiler == 'UCRT64' || env.compiler == 'MINGW32' ) && env.testOnpgwin == 'true' }}
        env:
          PGVER2: ${{ env.PGVER2 }}
          Platform: ${{ env.Platform }}
        shell: cmd
        run: |
          echo on
          echo PGVER2   - %PGVER2%
          echo Platform - %Platform%
          rem Need to manually start PostgreSQL
          if "%Platform%"=="x64" (net stop postgresql-x64-%PGVER2%)
          if "%Platform%"=="x86" (net stop postgresql-%PGVER2%)
          if "%Platform%"=="notset" (echo Platform is not set, therefore no net stop happens.)

      - name: Release
        if: github.ref_type == 'tag'
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          replacesArtifacts: true
          commit: ${{ env.USER_GITHUB_SHA }}
          tag: ${{ env.USER_GITHUB_REF_NAME }}
          artifacts: "plr-${{ env.HEAD8_GITHUB_SHA }}-${{ env.os }}-${{ env.compiler }}-${{ env.Platform }}-R${{ env.rversion }}-PG${{ env.pgversion }}.*"
          token: ${{ secrets.ACTIONS_CREATE_RELEASE_REPO_SECRET }}
        env:
          USER_GITHUB_SHA: ${{ github.sha }}
          USER_GITHUB_REF_NAME: ${{ github.ref_name }}
